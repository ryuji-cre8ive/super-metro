// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go
//
// Generated by this command:
//
//	mockgen -source=payment.go -destination=./mock/payment.go
//
// Package mock_stores is a generated GoMock package.
package mock_stores

import (
	reflect "reflect"

	domain "github.com/ryuji-cre8ive/super-metro/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentStore is a mock of PaymentStore interface.
type MockPaymentStore struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentStoreMockRecorder
}

// MockPaymentStoreMockRecorder is the mock recorder for MockPaymentStore.
type MockPaymentStoreMockRecorder struct {
	mock *MockPaymentStore
}

// NewMockPaymentStore creates a new mock instance.
func NewMockPaymentStore(ctrl *gomock.Controller) *MockPaymentStore {
	mock := &MockPaymentStore{ctrl: ctrl}
	mock.recorder = &MockPaymentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentStore) EXPECT() *MockPaymentStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPaymentStore) Add(userId, cardNumber, expiryDate, cvv string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", userId, cardNumber, expiryDate, cvv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPaymentStoreMockRecorder) Add(userId, cardNumber, expiryDate, cvv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPaymentStore)(nil).Add), userId, cardNumber, expiryDate, cvv)
}

// Delete mocks base method.
func (m *MockPaymentStore) Delete(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPaymentStoreMockRecorder) Delete(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPaymentStore)(nil).Delete), userId)
}

// Get mocks base method.
func (m *MockPaymentStore) Get(userId string) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userId)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPaymentStoreMockRecorder) Get(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPaymentStore)(nil).Get), userId)
}
