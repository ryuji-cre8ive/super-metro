// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -source=transaction.go -destination=./mock/transaction.go
//
// Package mock_stores is a generated GoMock package.
package mock_stores

import (
	reflect "reflect"

	domain "github.com/ryuji-cre8ive/super-metro/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionStore is a mock of TransactionStore interface.
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStoreMockRecorder
}

// MockTransactionStoreMockRecorder is the mock recorder for MockTransactionStore.
type MockTransactionStoreMockRecorder struct {
	mock *MockTransactionStore
}

// NewMockTransactionStore creates a new mock instance.
func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &MockTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStore) EXPECT() *MockTransactionStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTransactionStore) Add(userId, paymentId, transactionType string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", userId, paymentId, transactionType, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTransactionStoreMockRecorder) Add(userId, paymentId, transactionType, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTransactionStore)(nil).Add), userId, paymentId, transactionType, amount)
}

// Get mocks base method.
func (m *MockTransactionStore) Get(userId string) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userId)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionStoreMockRecorder) Get(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionStore)(nil).Get), userId)
}
