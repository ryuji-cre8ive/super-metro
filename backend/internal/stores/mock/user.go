// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=./mock/user.go
//
// Package mock_stores is a generated GoMock package.
package mock_stores

import (
	reflect "reflect"

	domain "github.com/ryuji-cre8ive/super-metro/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStore) Create(email, userName, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", email, userName, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserStoreMockRecorder) Create(email, userName, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStore)(nil).Create), email, userName, password)
}

// FindByEmail mocks base method.
func (m *MockUserStore) FindByEmail(email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserStoreMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserStore)(nil).FindByEmail), email)
}

// GetSession mocks base method.
func (m *MockUserStore) GetSession(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUserStoreMockRecorder) GetSession(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUserStore)(nil).GetSession), id)
}

// IsCookieExist mocks base method.
func (m *MockUserStore) IsCookieExist(cookieValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCookieExist", cookieValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsCookieExist indicates an expected call of IsCookieExist.
func (mr *MockUserStoreMockRecorder) IsCookieExist(cookieValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCookieExist", reflect.TypeOf((*MockUserStore)(nil).IsCookieExist), cookieValue)
}

// SetSession mocks base method.
func (m *MockUserStore) SetSession(id, session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", id, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockUserStoreMockRecorder) SetSession(id, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockUserStore)(nil).SetSession), id, session)
}

// TopUp mocks base method.
func (m *MockUserStore) TopUp(id string, amount int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", id, amount)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopUp indicates an expected call of TopUp.
func (mr *MockUserStoreMockRecorder) TopUp(id, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockUserStore)(nil).TopUp), id, amount)
}
