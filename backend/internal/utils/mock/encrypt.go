// Code generated by MockGen. DO NOT EDIT.
// Source: encrypt.go
//
// Generated by this command:
//
//	mockgen -source=encrypt.go -destination=./mock/encrypt.go
//
// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncryptType is a mock of EncryptType interface.
type MockEncryptType struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptTypeMockRecorder
}

// MockEncryptTypeMockRecorder is the mock recorder for MockEncryptType.
type MockEncryptTypeMockRecorder struct {
	mock *MockEncryptType
}

// NewMockEncryptType creates a new mock instance.
func NewMockEncryptType(ctrl *gomock.Controller) *MockEncryptType {
	mock := &MockEncryptType{ctrl: ctrl}
	mock.recorder = &MockEncryptTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptType) EXPECT() *MockEncryptTypeMockRecorder {
	return m.recorder
}

// CheckHashPassword mocks base method.
func (m *MockEncryptType) CheckHashPassword(hashPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHashPassword", hashPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHashPassword indicates an expected call of CheckHashPassword.
func (mr *MockEncryptTypeMockRecorder) CheckHashPassword(hashPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHashPassword", reflect.TypeOf((*MockEncryptType)(nil).CheckHashPassword), hashPassword, password)
}

// Decrypt mocks base method.
func (m *MockEncryptType) Decrypt(encryptedData string, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", encryptedData, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptTypeMockRecorder) Decrypt(encryptedData, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptType)(nil).Decrypt), encryptedData, key)
}

// Encrypt mocks base method.
func (m *MockEncryptType) Encrypt(plainText, key []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plainText, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptTypeMockRecorder) Encrypt(plainText, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptType)(nil).Encrypt), plainText, key)
}

// PasswordEncrypt mocks base method.
func (m *MockEncryptType) PasswordEncrypt(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordEncrypt", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordEncrypt indicates an expected call of PasswordEncrypt.
func (mr *MockEncryptTypeMockRecorder) PasswordEncrypt(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordEncrypt", reflect.TypeOf((*MockEncryptType)(nil).PasswordEncrypt), password)
}
